{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","monster","className","src","id","alt","name","CardList","monsters","map","key","SearchBox","placeholder","onChange","type","App","url","useState","data","setData","useEffect","a","fetch","response","json","fetchData","useFetch","search","value","setValue","event","target","useInputValue","filteredMonsters","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAGaA,G,kBAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAClB,yBAAKC,UAAU,QACb,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAKJ,EAAQK,OACnF,4BAAKL,EAAQK,SCFJC,EAAW,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACtB,yBAAKN,UAAU,aACZM,EAASC,KAAI,SAAAR,GAAO,OACjB,kBAAC,EAAD,CAAMS,IAAKT,EAAQG,GAAIH,QAASA,SCJ3BU,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,SAAf,OACvB,2BAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaC,SAAUA,MC2C/DE,MA1Cf,WACE,IAAMP,EA0BR,SAAkBQ,GAAM,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,KAYrB,OATAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEACyBC,MAAMN,GAD/B,cACQO,EADR,gBAEqBA,EAASC,OAF9B,OAEQA,EAFR,OAGEL,EAAQK,GAHV,4CADc,uBAAC,WAAD,wBAMdC,KACC,CAACT,IAEGE,EAtCUQ,CAAS,8CACpBC,EAgBR,WAA0B,IAAD,EACGV,mBAAS,IADZ,mBAChBW,EADgB,KACTC,EADS,KAGvB,MAAO,CACLD,QACAf,SAAU,SAAAiB,GAAK,OAAID,EAASC,EAAMC,OAAOH,SArB5BI,GAETC,EAAmBzB,EAAS0B,QAAO,SAAAjC,GAAO,OAC9CA,EAAQK,KAAK6B,cAAcC,SAAST,EAAOC,MAAMO,kBAGnD,OACE,yBAAKjC,UAAU,OACb,wBAAIA,UAAU,eAAd,mBACA,kBAAC,EAAD,eAAWU,YAAY,kBAAqBe,IAC5C,kBAAC,EAAD,CAAUnB,SAAUyB,MCLNI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ede0715.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css'\n\nexport const Card = ({monster}) => \n  <div className=\"card\">\n    <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt={monster.name} />\n    <h1>{monster.name}</h1>\n  </div>","import React from 'react';\nimport './card-list.style.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = ({monsters}) => \n  <div className=\"card-list\">\n    {monsters.map(monster => \n        <Card key={monster.id} monster={monster} />\n    )}\n  </div>","import React from 'react';\nimport './search-box.style.css';\n\nexport const SearchBox = ({placeholder, onChange}) =>\n  <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={onChange} />","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component.jsx';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nfunction App() {\n  const monsters = useFetch('https://jsonplaceholder.typicode.com/users');\n  const search = useInputValue();\n\n  const filteredMonsters = monsters.filter(monster => \n    monster.name.toLowerCase().includes(search.value.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\" >\n      <h1 className=\"App-heading\">Monster Rolodex</h1>\n      <SearchBox placeholder=\"Search monster\" {...search} />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\n\nfunction useInputValue() {\n  const [value, setValue] = useState('');\n\n  return {\n    value,\n    onChange: event => setValue(event.target.value)\n  }\n}\n\nfunction useFetch(url) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(url);\n      const json = await response.json();\n      setData(json);\n    }\n    fetchData();\n  }, [url]);\n\n  return data;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}